-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/Bibiiii/heskl#readme</a>
@package http-request-app
@version 0.1.0.0


-- | Module to Manage HTTP Requests
module HTTP

-- | Downloads the response from a given URL
download :: URL -> IO ByteString


-- | Module which helps parse JSON results
module Parse

-- | Decodes the JSON returned by the root API result
parse :: ByteString -> Either String AllResults

-- | The AllResults constructor defines the types of the root API results
--   
--   It is a derivation of the Show and Generic instances
data AllResults
instance GHC.Generics.Generic Parse.AllResults
instance GHC.Show.Show Parse.AllResults
instance Data.Aeson.Types.FromJSON.FromJSON Parse.AllResults
instance Data.Aeson.Types.ToJSON.ToJSON Parse.AllResults


-- | Module which helps parse JSON results for the type Film
module ParseFilms

-- | Decodes the JSON returned by the films API result
parseFilms :: ByteString -> Either String FilmResults

-- | The FilmResults constructor defines the types of the Film API Results
--   It is a derivation of the Show and Generic instances
data FilmResults

-- | The Film constructor defines the types of the Film Record
--   
--   It is a derivation of the Show and Generic instances
data Film
instance GHC.Generics.Generic ParseFilms.FilmResults
instance GHC.Show.Show ParseFilms.FilmResults
instance GHC.Generics.Generic ParseFilms.Film
instance GHC.Show.Show ParseFilms.Film
instance Data.Aeson.Types.FromJSON.FromJSON ParseFilms.FilmResults
instance Data.Aeson.Types.ToJSON.ToJSON ParseFilms.FilmResults
instance Data.Aeson.Types.FromJSON.FromJSON ParseFilms.Film
instance Data.Aeson.Types.ToJSON.ToJSON ParseFilms.Film


-- | Module which helps parse JSON results for the type People
module ParsePeople

-- | Decodes the JSON returned by the people API result
parsePeople :: ByteString -> Either String PeopleResults

-- | The PeopleResults constructor defines the types of the People API
--   Results It is a derivation of the Show and Generic instances
data PeopleResults

-- | The Person constructor defines the types of the Person Record It is a
--   derivation of the Show and Generic instances
data Person
instance GHC.Generics.Generic ParsePeople.PeopleResults
instance GHC.Show.Show ParsePeople.PeopleResults
instance GHC.Generics.Generic ParsePeople.Person
instance GHC.Show.Show ParsePeople.Person
instance Data.Aeson.Types.FromJSON.FromJSON ParsePeople.PeopleResults
instance Data.Aeson.Types.ToJSON.ToJSON ParsePeople.PeopleResults
instance Data.Aeson.Types.FromJSON.FromJSON ParsePeople.Person
instance Data.Aeson.Types.ToJSON.ToJSON ParsePeople.Person


-- | Module which helps parse JSON results for the type Planets
module ParsePlanets

-- | Decodes the JSON returned by the Planets API result
parsePlanets :: ByteString -> Either String PlanetResults

-- | The PlanetResults constructor defines the types of the Planet API
--   Results It is a derivation of the Show and Generic instances
data PlanetResults

-- | The Planet constructor defines the types of the Planet Record It is a
--   derivation of the Show and Generic instances
data Planet
instance GHC.Generics.Generic ParsePlanets.PlanetResults
instance GHC.Show.Show ParsePlanets.PlanetResults
instance GHC.Generics.Generic ParsePlanets.Planet
instance GHC.Show.Show ParsePlanets.Planet
instance Data.Aeson.Types.FromJSON.FromJSON ParsePlanets.PlanetResults
instance Data.Aeson.Types.ToJSON.ToJSON ParsePlanets.PlanetResults
instance Data.Aeson.Types.FromJSON.FromJSON ParsePlanets.Planet
instance Data.Aeson.Types.ToJSON.ToJSON ParsePlanets.Planet


-- | Module which helps parse JSON results for the type Species
module ParseSpecies

-- | Decodes the JSON returned by the Species API result
parseSpecies :: ByteString -> Either String SpeciesResults

-- | The <a>SpeciesResults</a> constructor defines the types of the Species
--   API Results It is a derivation of the Show and Generic instances
data SpeciesResults

-- | The Species constructor defines the types of the Species Record It is
--   a derivation of the Show and Generic instances
data Species
instance GHC.Generics.Generic ParseSpecies.SpeciesResults
instance GHC.Show.Show ParseSpecies.SpeciesResults
instance GHC.Generics.Generic ParseSpecies.Species
instance GHC.Show.Show ParseSpecies.Species
instance Data.Aeson.Types.FromJSON.FromJSON ParseSpecies.SpeciesResults
instance Data.Aeson.Types.ToJSON.ToJSON ParseSpecies.SpeciesResults
instance Data.Aeson.Types.FromJSON.FromJSON ParseSpecies.Species
instance Data.Aeson.Types.ToJSON.ToJSON ParseSpecies.Species


-- | Module to Manage the Creation of the database and any operations
--   performed on the database.
module Database

-- | Connects to the database and creates a Planets table
--   
--   This function takes no arguments
--   
--   This function returns an IO with a HDBC Connection
initialiseDBPlanets :: IO Connection

-- | Connects to the database and creates a People table
--   
--   This function takes no arguments
--   
--   This function returns an IO with a HDBC Connection
initialiseDBPeople :: IO Connection

-- | Connects to the database and creates a Species table
--   
--   This function takes no arguments
--   
--   This function returns an IO with a HDBC Connection
initialiseDBSpecies :: IO Connection

-- | Connects to the database and creates a Films table
--   
--   This function takes no arguments
--   
--   This function returns an IO with a HDBC Connection
initialiseDBFilms :: IO Connection

-- | Saves values to the Planets table
--   
--   It takes two arguments and returns an empty IO
savePlanets :: [Planet] -> Connection -> IO ()

-- | Saves values to the Person table
--   
--   It takes two arguments and returns an empty IO
savePeople :: [Person] -> Connection -> IO ()

-- | Saves values to the Species table
--   
--   It takes two arguments and returns an empty IO
saveSpecies :: [Species] -> Connection -> IO ()

-- | Saves values to the Film table
--   
--   It takes two arguments and returns an empty IO
saveFilms :: [Film] -> Connection -> IO ()

-- | Converts values of "unknown" to type Nothing
--   
--   It should only be used if the JSON value is sometimes "unknown" - do
--   not use for Null values
--   
--   It takes a single argument
convertUnkToNothing :: String -> Maybe String

-- | Gets the ID from any Star Wars API Url
--   
--   It takes a single argument
extractID :: Maybe [Char] -> Maybe [Char]

-- | Transforms Planet values to SQL
--   
--   It takes a single argument Record of type Planet and Returns an Array
--   of SQL Values
planetToSqlValues :: Planet -> [SqlValue]

-- | Prepares a Posgres statement that inserts values into the Planets
--   table
--   
--   It takes one argument and returns an IO with a prepared HDBC Statement
prepareInsertPlanetSmt :: Connection -> IO Statement

-- | Transforms Person values to SQL
--   
--   It takes a single argument Record of type Person and Returns an Array
--   of SQL Values
personToSqlValues :: Person -> [SqlValue]

-- | Prepares a Posgres statement that inserts values into the People table
--   
--   It takes one argument and returns an IO with a prepared HDBC Statement
prepareInsertPeopleSmt :: Connection -> IO Statement

-- | Transforms Species values to SQL
--   
--   It takes a single argument Record of type Species and Returns an Array
--   of SQL Values
speciesToSqlValues :: Species -> [SqlValue]

-- | Prepares a Posgres statement that inserts values into the Species
--   table
--   
--   It takes one argument and returns an IO with a prepared HDBC Statement
prepareInsertSpeciesSmt :: Connection -> IO Statement

-- | Transforms Film values to SQL
--   
--   It takes a single argument Record of type Film and Returns an Array of
--   SQL Values
filmToSqlValues :: Film -> [SqlValue]

-- | Prepares a Posgres statement that inserts values into the Film table
--   
--   It takes one argument and returns an IO with a prepared HDBC Statement
prepareInsertFilmSmt :: Connection -> IO Statement


-- | Module which helps process JSON results
module ProcessJson

-- | Processes the API result for a given URL and directory This function
--   takes two arguments
processJson :: String -> String -> IO ()

-- | Saves Planet JSON results to the database
savePlanetJson :: PlanetResults -> IO ()

-- | Saves People JSON results to the database
savePeopleJson :: PeopleResults -> IO ()

-- | Saves Film JSON results to the database
saveFilmsJson :: FilmResults -> IO ()

-- | Saves Species JSON results to the database
saveSpeciesJson :: SpeciesResults -> IO ()

-- | Catches any error while parsing a JSON If an error occurs, the error
--   is printed. Otherwise the result is returned
--   
--   It takes three arguments:
--   
--   <ul>
--   <li>the parsing function to perform on a given JSON</li>
--   <li>a JSON</li>
--   <li>the save function to perform if the parse is successful</li>
--   </ul>
--   
--   It returns an empty IO
catchErr :: Show a => (t1 -> Either a t2) -> t1 -> (t2 -> IO ()) -> IO ()

-- | Parse Directories is performed on the API's root result.
--   
--   It processes the JSONs for each directory within the root (planets,
--   people, species, films)
parseDirectories :: ByteString -> IO ()


-- | Module which contains the queries
module Queries

-- | Drops all tables from the database, ensures tables are always clean
--   when re-running code
dropAllTables :: IO ()

-- | Query to delete all people from a given planet
queryDeletePeople :: IO ()

-- | Query to insert a new row into the films table
queryInsertToFilms :: String -> String -> String -> String -> String -> String -> IO ()

-- | Query to retrive title and producer from the films table
queryFilms :: IO ()

-- | Query to find people and their homeworlds
queryHomeworlds :: IO ()

-- | Query to find and return the planet with the highest ground
queryPlanetWithHighestGround :: IO ()
